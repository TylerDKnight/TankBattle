*************README.TXT*************
HOW TO RUN:
	-Unzip the Project1 folder and open it in Eclipse or an equivalent Java IDE
	-Open the Game class stored in the src folder
	-Expand the console panel so that it takes up a large portion of the screen
	-Run the program and select the info menu option
	-Read the game rules and information then play the game 
	-Play the game again
	-Repeat the previous step forever
	
GAME DESIGN:
	The game was designed with a WWII theme in mind, meant to simulate and recount
	the Battle of Kurst: one of the largest and most important tank battles of the 
	entire war. For the Germans, this was a turning point, where a decisive victory 
	would bring a huge strategical advantage...and where a loss would destroy their 
	dwindling war resources. I made the game hoping to put the player in the shoes
	of someone on the front lines, fighting for their life in a situation where the
	next volley of shots might be their last. To best provide this experience, the
	game play is padded with story, history, action and reaction. And if the user
	plays well enough, it might just give them a chance to rewrite history...
	
	The game is structured like every tank battle game ever, but without
	graphics. I drew inspiration particularly from an iPhone tank battle game
	I used to play on my Mom's phone during long car rides circa 2009. The
	player would take turns firing shots at the opponents with various choosable
	weaponry until their health was depleted. This game format is immediately 
	what popped into my head when I read the project guidelines.
	
	To simulate realistic conditions, I made health and ammunition non-regenerative.
	I considered implementing trajectory calculations using air resistance, but
	decided against it because it would be more difficult for the player to visualize
	their shell's path with air resistance in a text based game. In liu of air
	resistance calculations, I designed the firing sequence to calculate how long the
	user's shot whould be in the air in real life, then make them wait that long before 
	seeing the outcome of their shot. This enhances the experience and realism as well
	as builds anticipation.
	
	I realize that graphics are not to be considered in this game, as it is TTY, thus
	I designed the game to make sure that any text that isn't a word, punctuation
	or number is not functional to the game. These decorations, such as the ASCII
	tanks, bordered menus or the trajectory progress bar are meant to be there only
	as eye candy that supplement the textual aspect of the TTY. They are not video 
	game graphics, because they are not central to the game. If taken away, the game 
	could still be played exactly the same: with a keyboard and an enter key.
	
PROGRAMMING DESIGN:
	The program was is designed to have a simple loop structure. At it's core, it is just 
	a while loop that contains an if-else statement used to alternate turns for the
	players.
	
	The menu runs from main(), and all subsequent methods either call other methods,
	or call Menu() or Quit(). Most other aspects of the game are also stuffed into a 
	specialized method that can be called at any time. This organizes the code, 
	declutters it, and makes it more compact (by avoiding code redundancies).
	
	This game could just as easily have been designed with an OO structure, with
	objects representing battlefields, players, enemies, shells, menus and more.
	I did not design the game this way because I am not yet comfortable enough with 
	Java and object oriented programming to write a large scale OO project. Also, I 
	think for this game format, turning everything into objects would take more time 
	than it would save.
	
REQUIREMENTS COVERED:
	-Program well formatted: Proper and consistent indentation and whitespace
	-Throughly documented: comments explaining every non-obvious piece of code, doc strings for every method
	-Submission: in a ZIP file with README.TXT
	-User input: always scanned for on the same line as prompt
	-Outcomes: User informed of launch outcome with <1m and <3m messages
	-Game status: User given score/health/ammo/etc info before and after their shot
	-Score: MoralPoints are project equivalent of score
	-Quit: User allowed to quit at the end of round  
	
EXTRA CREDIT FEATURES:
	-Menu: central menu with new game, information and quit options
	-Continuous quit: option to quit by typing "Quit","quit","q" or "Q" at any time, and at any prompt
	-Information screen: to give the player a quick run down of the game rules
	-A story line: adapts and reacts to player's performance in game 
	-Random prompts: can ask user a question in multiple ways to keep things fresh
	-An enemy AI: makes the game more engaging if someone shoot back at you
	-Teams: can choose which side of the fight to be on and game will play from that POV
	-Health points and MoralPoints cut off: multiple ways to win or lose the game adds complexity
	-Weapon stockpile: ability to choose projectile type from a limited store
	-Text decorations: character art tanks and trajectory progress bar
	-Additional hit information providing numeric info on hits and misses
	-Difficulty: option to choose how skilled AI opponent is at shooting
	-Complex damage: AI or player can accrue damage from nearby explosions, quantified by a homemade equation
	-Usage of additional math: delved deeper into projectile motion, using angle of reach and velocity of reach formulas for AI
	-Error handling: Any error causing or invalid inputs to prompts are dealt with without terminating game execution 	
	
FEATURE WISHLIST:
	Stuff I would have likely implemented for kicks if I had the time and/or dedication:
		-Dynamic difficulty: an enemy that adjusts how accurate its shots are based on your accuracy. 
		 Like an AI player, but the AI is just mimicry of your own behavior. Could lead to more 
		 suspenseful games because AI shoots better once you shoots closer to them.
		-Moving Targets: the ability to spend your turn moving instead of shooting. Movement during the
		 game would be limited by fuel, a static amount that is consumed throughout the course of the game.
		-Multiple Enemies: face multiple enemies before the game is over, i.e. kill 3 German tanks in a game.
		-MoralPoints Exchange: give the user the option to purchase armor or additional ammunition between rounds
		 using MoralPoints accumulated during the game.
